/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package com.itii.andropadserver;

import com.itii.andropadcommon.AndroButton;
import com.itii.andropadcommon.Observer;
import java.awt.AWTException;
import java.awt.Robot;
import java.io.IOException;
import java.util.Map.Entry;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.bluetooth.BluetoothStateException;

/**
 *
 * @author Coralie
 */
public class ObserverThread extends Thread implements Observer {
    
    
    private int m_gamepadIndex = -1;
    private int m_time = 100;
    private Translator m_translator = new Translator();
    private Robot m_robot = new Robot();
    private long m_lastTime;
    private boolean m_run;
    
    public ObserverThread(int n, int t) throws AWTException {
        m_gamepadIndex = n;
        m_time = t;
        m_robot = new Robot();
        m_lastTime = System.currentTimeMillis();
        m_run = true;
    }
    
    @Override
    public void run() {
        while(m_run) {
            if(m_gamepadIndex >= 0 && System.currentTimeMillis() - m_lastTime > m_time) {
                m_lastTime = System.currentTimeMillis();
                AndroState state;
                try {
                    state = GamepadManager.getInstance().getPad(m_gamepadIndex).getState();     
                    for(Entry ent : state.getState().entrySet()) {
                        AndroButton.Mapping map = (AndroButton.Mapping)ent.getKey();
                        //If the button state last longer than m_time, repeat the press action
                        if(ent.getValue() == AndroButton.State.PRESSED) {
                            if(GamepadManager.getInstance().getPad(m_gamepadIndex).getButton(map).getStateTime() > m_time) {

                            int keycode = m_translator.getKeyEvent((AndroButton.Mapping)ent.getKey());
                            if(keycode != -1) {
                                    m_robot.keyPress(keycode);
                            }
                            }
                        }
                    }    
                } catch (BluetoothStateException ex) {
                    Logger.getLogger(ObserverThread.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    Logger.getLogger(ObserverThread.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    @Override
    public void update(AndroButton.State state, Object obj) {
        if(obj instanceof AndroButton) {
            AndroButton button = (AndroButton)obj;
            OutputController.writeLine("Input for gamepad :" + m_gamepadIndex);
            OutputController.writeLine("Button : " + button.getButton().toString());
            OutputController.writeLine("Button : " + button.getState().toString());
            int keycode = m_translator.getKeyEvent(button.getButton());
            if(keycode != -1) {
	            if(state == AndroButton.State.PRESSED) {
	            	m_robot.keyPress(keycode);
	            } else if(state == AndroButton.State.RELEASED) {
	            	m_robot.keyRelease(keycode);
	            }
            }
        }
    }
    
    public void setRun(boolean b) {
        m_run = b;
    }
    
    
    
}
